---
description: 
globs: 
alwaysApply: false
---
# Filo Data Broker CLI - Cursor Rules

## Project Overview
This is a Node.js CLI application for importing CSV data to the Filo Data Broker with privacy-aware column selection. The tool provides interactive prompts to identify private/sensitive data columns and handles blockchain-based data storage using Synapse SDK integration.

## Architecture & Key Files

### Entry Point
- [bin/cli.js](mdc:bin/cli.js) - Main CLI entry point using Commander.js
  - Defines the `import` command with required options (--private-key, --file)
  - Defines the `setup` command for payment rail initialization
  - Defines the `balance` command for checking wallet and payment balances
  - Handles interactive privacy configuration using Inquirer.js
  - Orchestrates the CSV processing and blockchain upload workflow

### Core Libraries
- [lib/processor.js](mdc:lib/processor.js) - CSV processing and data transformation
  - Uses `csv-parse` for efficient streaming of large CSV files
  - Provides callbacks for header processing and progress tracking
  - Handles separation of public vs private data columns

- [lib/uploader.js](mdc:lib/uploader.js) - Data upload and blockchain integration
  - Manages IPFS uploads for public and private data
  - Integrates with NFT contract for collection creation
  - Handles CID linking to blockchain records

### Blockchain Integration
- [lib/contracts/NFT.js](mdc:lib/contracts/NFT.js) - NFT contract interface
  - Uses FDBRegistry contract for collection management
  - Handles collection creation with metadata and pricing
  - Manages dataset linking with IPFS CIDs

- [lib/contracts/FDBRegistry.json](mdc:lib/contracts/FDBRegistry.json) - Contract ABI
  - Registry contract deployed at 0x8bb1d7e08d522246bc9eA24f2A84e67cf74729C5
  - Contains ABI for createCollection, setCollectionCid, and payment functions

### Synapse Network Integration
- [lib/synapse/synapse.js](mdc:lib/synapse/synapse.js) - Core Synapse SDK integration
  - Creates Synapse instance with Pandora service
  - Configures CDN support and provider connections

- [lib/synapse/payment.js](mdc:lib/synapse/payment.js) - Payment system management
  - Handles USDFC token operations and balance checking
  - Manages proof set selection and storage capacity calculations
  - Provides payment rail setup and reservation functionality

- [lib/synapse/storage.js](mdc:lib/synapse/storage.js) - Storage operations
  - Manages decentralized storage through Synapse network
  - Handles data persistence and retrieval operations

### Configuration Files
- [package.json](mdc:package.json) - Project dependencies and scripts
  - Uses ES modules (`"type": "module"`)
  - Key dependencies: commander, chalk, csv-parse, inquirer, ethers, @filoz/synapse-sdk
  - Binary executable named `filo` pointing to [bin/cli.js](mdc:bin/cli.js)

### Sample Data
- [sample/](mdc:sample) - Contains sample CSV files for testing
  - Various datasets for development and testing purposes

## CLI Commands Structure

### Setup Command
```bash
npm start setup -- --private-key PRIVATE_KEY
```
- Initializes payment rail for Synapse network
- Creates proof sets for storage operations
- Displays account balance and storage metrics
- Required before first data import

### Balance Command
```bash
npm start balance -- --private-key PRIVATE_KEY
```
- Checks wallet and payment balances across different tokens
- Displays USDFC wallet balance, deposit balance, and allowances
- Useful for monitoring payment capacity before operations
- No prerequisites required

### Import Command
```bash
npm start import -- --private-key PRIVATE_KEY --file path/to/file.csv
```
- **Removed**: API key requirement (no longer needed)
- **Required**: Private key for Ethereum wallet operations
- **Required**: CSV file path for data import
- **Prerequisite**: Must run setup command first

## Development Patterns

### Code Style Guidelines
- Uses ES6 modules with `.js` extensions
- No empty lines inside functions (per user preference)
- Prefers JavaScript over TypeScript
- Uses async/await for asynchronous operations
- Comprehensive error handling with colored console output

### Interactive Workflow

#### Setup Flow
1. **Wallet Validation** - Validates private key and creates wallet instance
2. **Payment Rail Setup** - Initializes Synapse payment system
3. **Balance Checking** - Displays available funds and storage capacity
4. **Proof Set Creation** - Sets up storage proof sets if needed

#### Balance Flow
1. **Wallet Connection** - Validates private key and creates wallet instance
2. **Payment System Access** - Connects to Synapse payment system
3. **Balance Retrieval** - Fetches wallet balance, deposit balance, and allowances
4. **Display Information** - Shows formatted balance information

#### Import Flow
1. **Prerequisites Check** - Verifies proof set exists from setup
2. **File Validation** - Checks if CSV file exists
3. **Dataset Metadata** - Interactive prompts for name, description, and pricing
4. **CSV Parsing** - Streams and parses CSV headers first
5. **Column Display** - Shows all available column names
6. **Privacy Selection** - Interactive checkbox for selecting private columns
7. **Data Processing** - Row-by-row processing with progress updates
8. **Parallel Upload** - Public and private data uploaded to IPFS separately
9. **NFT Creation** - Creates collection via FDBRegistry contract
10. **Dataset Linking** - Links IPFS CIDs to blockchain record

### Key Dependencies Usage
- **Commander.js** - CLI argument parsing and command definition
- **Chalk** - Terminal output coloring and styling
- **Inquirer.js** - Interactive command-line prompts (input and checkbox)
- **csv-parse** - Streaming CSV parsing with column header support
- **ethers** - Ethereum wallet operations and contract interaction
- **@filoz/synapse-sdk** - Synapse network integration for storage and payments
- **lodash-es** - Data manipulation utilities (pick function for column filtering)

## Storage and Payment Integration

### Synapse SDK Features
- **Pandora Service**: Decentralized storage with proof-of-data-possession
- **Payment Rails**: USDFC token-based payment system
- **CDN Support**: Content delivery network for faster access
- **Proof Sets**: Storage verification and data integrity management

### Network Configuration
- **RPC Provider**: Filecoin Calibration testnet
- **Pandora Address**: 0x485da5B22E524F292108F485E5c56a6db6572547
- **Payment Token**: USDFC on Calibration network
- **Storage Pricing**: 3 USDFC per TB per month

## Common Development Tasks

### Adding New Commands
1. Define new command in [bin/cli.js](mdc:bin/cli.js) using `.command()` method
2. Add required/optional options with `.requiredOption()` or `.option()`
3. Implement action handler with async function
4. Add processing logic to appropriate lib files

### Modifying CSV Processing
- Update [lib/processor.js](mdc:lib/processor.js) for parsing logic changes
- Modify data separation logic for public/private columns
- Consider memory usage for large files - current implementation streams data

### Blockchain Integration Changes
- Update [lib/contracts/NFT.js](mdc:lib/contracts/NFT.js) for contract modifications
- Modify [lib/uploader.js](mdc:lib/uploader.js) for upload flow changes
- Test with FDBRegistry contract on Calibration testnet

### Testing with Sample Data
- Use files in [sample/](mdc:sample) directory for development testing
- Test payment setup flow before data import
- Verify end-to-end workflow from setup to final NFT creation
- Check balance command for payment monitoring

### Error Handling Patterns
- File existence validation before processing
- Proof set validation before import operations
- CSV parsing error handling with descriptive messages
- Ethereum transaction error handling with gas estimation
- Payment balance validation with user-friendly messages
- Balance fetching error handling for network issues

## Security Considerations
- Private keys are required but never logged or stored
- Private data columns are uploaded to IPFS with separate CIDs
- Public data columns remain accessible via public IPFS CIDs
- Payment operations require sufficient USDFC balance
- Contract interactions use proper gas estimation and error handling
- Balance information is displayed for transparency but not stored
