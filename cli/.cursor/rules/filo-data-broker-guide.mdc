---
description: 
globs: 
alwaysApply: true
---
# Filo Data Broker CLI Project Guide

## Project Overview

This is a command-line interface tool for importing CSV data to Filo Data Broker with privacy-aware column selection. The CLI allows users to interactively select which columns contain sensitive data before uploading to the blockchain-based data broker using Synapse network integration.

## Project Structure

### Entry Points
- **Main CLI**: [bin/cli.js](mdc:bin/cli.js) - Primary command-line interface entry point
- **Package Config**: [package.json](mdc:package.json) - Project dependencies and scripts

### Core Modules
- **Data Processing**: [lib/processor.js](mdc:lib/processor.js) - Main CSV processing and data transformation logic
- **File Upload**: [lib/uploader.js](mdc:lib/uploader.js) - Handles file upload operations to the data broker

### Blockchain Integration
- **Smart Contracts**: [lib/contracts/](mdc:lib/contracts) - NFT contract definitions and registry JSON
  - [lib/contracts/NFT.js](mdc:lib/contracts/NFT.js) - NFT contract interface using FDBRegistry
  - [lib/contracts/FDBRegistry.json](mdc:lib/contracts/FDBRegistry.json) - Registry contract ABI and address

### Synapse Network Integration
- **Payment System**: [lib/synapse/payment.js](mdc:lib/synapse/payment.js) - Handles payment processing through Synapse SDK
- **Storage Interface**: [lib/synapse/storage.js](mdc:lib/synapse/storage.js) - Manages data storage operations
- **Core Synapse**: [lib/synapse/synapse.js](mdc:lib/synapse/synapse.js) - Main Synapse network integration with Pandora

### Sample Data
- **Test Datasets**: [sample/](mdc:sample) - Contains sample CSV files for testing:
  - [sample/bali.csv](mdc:sample/bali.csv) - Bali tourism destinations dataset
  - [sample/quotes.csv](mdc:sample/quotes.csv) - Famous quotes collection
  - [sample/youtube.csv](mdc:sample/youtube.csv) - YouTube video analytics
  - [sample/mock.csv](mdc:sample/mock.csv) - Mock testing data

## Key Features

### Privacy-Aware Data Import
- Interactive column selection for privacy classification
- Automatic CSV header analysis and validation
- Real-time data summary and statistics
- Parallel upload of public and private data to IPFS

### Blockchain Integration
- Ethereum wallet integration via ethers.js
- NFT-based data ownership and access control
- FDBRegistry smart contract for collection management
- Automated dataset linking with CID storage

### Synapse Network Integration
- Pandora service integration for decentralized storage
- Payment rail setup and management
- Proof set selection and storage capacity management
- USDFC token handling for storage payments

### User Experience
- Commander.js for CLI argument parsing
- Inquirer.js for interactive prompts
- Chalk for colored terminal output
- Comprehensive error handling and validation
- Storage metrics and balance reporting

## Development Patterns

### Language Preference
- **JavaScript over TypeScript** - Project uses plain JavaScript as preferred
- **No empty lines in functions** - Code style preference for compact function bodies

### Dependencies
- **ethers**: Ethereum blockchain interaction
- **commander**: CLI framework and argument parsing
- **inquirer**: Interactive command-line prompts
- **chalk**: Terminal styling and colors
- **csv-parse**: CSV file processing
- **fs-extra**: Enhanced file system operations
- **@filoz/synapse-sdk**: Synapse network integration
- **lodash-es**: Utility functions for data manipulation

## Usage Flow

1. **Payment Setup**: Initialize payment rail with proof set creation
2. **Balance Check**: Verify payment capacity and token balances
3. **CSV Analysis**: Parse and validate input CSV file
4. **Column Discovery**: Extract and display all column headers
5. **Privacy Selection**: Interactive checkbox for sensitive data marking
6. **Data Processing**: Row-by-row processing with progress tracking
7. **Parallel Upload**: Upload public and private data to IPFS
8. **NFT Creation**: Create collection via FDBRegistry contract
9. **Dataset Linking**: Link CIDs to NFT collection

## Common Commands

```bash
# Set up payment rail first (required for new users)
npm start setup -- --private-key PRIVATE_KEY

# Check wallet and payment balances
npm start balance -- --private-key PRIVATE_KEY

# Import data with interactive privacy selection
npm start import -- --private-key PRIVATE_KEY --file data.csv

# Show help information
npm start -- --help
npm start setup --help
npm start balance --help
npm start import --help
```

## Contract Architecture

### FDBRegistry Contract
- **Address**: 0x8bb1d7e08d522246bc9eA24f2A84e67cf74729C5
- **Functions**:
  - `createCollection()` - Creates new NFT collection with metadata
  - `setCollectionCid()` - Links IPFS CIDs to collection
  - `toggleCollectionStatus()` - Manages collection availability
  - Payment processing with USDFC token integration

### Storage Integration
- **Pandora Address**: 0x485da5B22E524F292108F485E5c56a6db6572547
- **RPC Endpoint**: https://api.calibration.node.glif.io/rpc/v1
- **Network**: Filecoin Calibration testnet
- **CDN Support**: Enabled for faster data access
