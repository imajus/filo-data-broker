---
description: 
globs: 
alwaysApply: true
---
# Filecoin Data Broker (FDB) EVM Project

This is a comprehensive Filecoin EVM-compatible data marketplace that combines NFT-based dataset access tokens with advanced provable data possession (PDP) verification and FWS payment integration.

## Project Overview

This project implements a data marketplace where:
- **FDBRegistry** manages dataset collections with NFT-based access control
- **PandoraService** provides FWS payment rails and PDP verification integration
- **PDP Verification** ensures data integrity through cryptographic proofs
- **Payment System** handles automatic fee distribution and revenue sharing
- Built for Filecoin EVM (FEVM) with Calibration testnet support

## Key Architecture

### Core Contracts
- **[FDBRegistry.sol](mdc:contracts/FDBRegistry.sol)** - Main registry for dataset collections with payment integration
- **[NFT.sol](mdc:contracts/NFT.sol)** - ERC-721 dataset access tokens created by registry

### FWS (Filecoin Web Services) Integration
- **[PandoraService.sol](mdc:contracts/fws/PandoraService.sol)** - Advanced payment rails with PDP integration
- **[Payments.sol](mdc:contracts/fws/payments/Payments.sol)** - Enterprise payment infrastructure
- **[RateChangeQueue.sol](mdc:contracts/fws/payments/RateChangeQueue.sol)** - Payment rate management

### PDP (Provable Data Possession) System
- **[PDPVerifier.sol](mdc:contracts/pdp/PDPVerifier.sol)** - Cryptographic proof verification
- **[SimplePDPService.sol](mdc:contracts/pdp/SimplePDPService.sol)** - Basic PDP service implementation
- **[Proofs.sol](mdc:contracts/pdp/Proofs.sol)** - Proof handling and validation
- **[Cids.sol](mdc:contracts/pdp/Cids.sol)** - IPFS CID utilities
- **[BitOps.sol](mdc:contracts/pdp/BitOps.sol)** - Bit manipulation utilities
- **[Fees.sol](mdc:contracts/pdp/Fees.sol)** - PDP fee calculation

### Configuration
- **[hardhat.config.js](mdc:hardhat.config.js)** - Hardhat configuration with Filecoin networks
- **[helper-hardhat-config.js](mdc:helper-hardhat-config.js)** - Network helper configurations
- **[package.json](mdc:package.json)** - Project dependencies and scripts

### Deployment (Two-Stage Process)
- **[deploy/00_pandora.js](mdc:deploy/00_pandora.js)** - Deploys PandoraService with proxy pattern and adds service providers
- **[deploy/01_registry.js](mdc:deploy/01_registry.js)** - Deploys FDBRegistry with PandoraService integration
- Uses hardhat-deploy plugin with dependency management

### Tasks (CLI Interface)
- **[tasks/index.js](mdc:tasks/index.js)** - Exports all available Hardhat tasks
- **tasks/nft-factory/** - NFT/Dataset collection management:
  - **[create-collection.js](mdc:tasks/nft-factory/create-collection.js)** - Create dataset collections
  - **[mint-nft.js](mdc:tasks/nft-factory/mint-nft.js)** - Mint dataset access NFTs
  - **[batch-mint.js](mdc:tasks/nft-factory/batch-mint.js)** - Batch mint operations
  - **[get-collections.js](mdc:tasks/nft-factory/get-collections.js)** - Query collections
  - **[collection-stats.js](mdc:tasks/nft-factory/collection-stats.js)** - Collection analytics
  - **[sync-contracts.js](mdc:tasks/nft-factory/sync-contracts.js)** - Contract ABI synchronization
- **tasks/pandora-service/** - PandoraService management:
  - **[add-service-provider.js](mdc:tasks/pandora-service/add-service-provider.js)** - Register storage providers
  - **[approve-provider.js](mdc:tasks/pandora-service/approve-provider.js)** - Approve pending providers
  - **[get-pricing.js](mdc:tasks/pandora-service/get-pricing.js)** - Query service pricing
  - **[list-providers.js](mdc:tasks/pandora-service/list-providers.js)** - List available providers

### IPFS/Filecoin Tools
- **[tools/go-generate-car/](mdc:tools/go-generate-car)** - Go CLI tool for CAR file generation and CommP computation
- Essential for preparing metadata and assets for Filecoin storage

## Development Workflow

1. **Compile contracts**: `npm run compile`
2. **Deploy infrastructure**: `npx hardhat deploy --network calibrationnet`
3. **Create dataset collection**: `npx hardhat create-collection --registry <address> --name "Dataset" --symbol "DATA" --price "1000000000000000000"`
4. **Purchase dataset access**: `npx hardhat purchase-dataset --registry <address> --collection <address>`
5. **Manage providers**: `npx hardhat add-service-provider --pandora <address> --provider <address> --pdp-url <url>`

## Network Configuration

- **Default network**: Calibration testnet (chainId: 314159)
- **Local development**: localnet (chainId: 31415926)
- **Production**: Filecoin mainnet (chainId: 314)
- **Block explorer**: Filecoin testnet Blockscout for verification

## Environment Variables

Required for deployment:
- `PDP_VERIFIER_ADDRESS` - PDP verification contract address
- `PAYMENTS_CONTRACT_ADDRESS` - FWS Payments contract address
- `USDFC_TOKEN_ADDRESS` - Payment token address (USDFC)
- `INITIAL_OPERATOR_COMMISSION_BPS` - Operator commission (default: 500 = 5%)

## Integration Components

### Data Marketplace Features
- Dataset collections represent data with public/private portions
- NFT ownership grants access to private dataset content
- Automated payment distribution with fee splitting
- PDP verification ensures data integrity and availability

### Payment Architecture
- USDFC token payments with automatic fee distribution
- 10% deployer fee, 10% FWS fee, 80% data owner
- Payment rails through PandoraService integration
- Balance tracking and withdrawal mechanisms

### Verification System
- Cryptographic proof verification for data storage
- Service provider registry and approval system
- Commission-based pricing with CDN add-on options
- Arbitration system for failed proofs and fault handling
