---
description: 
globs: 
alwaysApply: false
---
# Development Workflow & CLI Integration

## Core Development Commands

### Contract Development Cycle
```bash
# 1. Install dependencies
npm install

# 2. Compile contracts
npm run compile

# 3. Deploy infrastructure (two-stage process)
npx hardhat deploy --network calibrationnet

# 4. Sync contract ABIs for integration
npx hardhat sync-contracts --network calibrationnet

# 5. Test deployment with CLI tasks
npx hardhat get-collections --registry <address> --network calibrationnet
```

### Local Development Setup
```bash
# Start local Hardhat node
npx hardhat node

# Deploy to local network (new terminal)
npx hardhat deploy --network localhost

# Run tests against local deployment
npm run test
```

## CLI Task System

### FDBRegistry Tasks (Data Marketplace)

#### Collection Management
**[tasks/nft-factory/create-collection.js](mdc:tasks/nft-factory/create-collection.js)** - Create dataset collections:
```bash
npx hardhat create-collection \
  --registry 0x123...abc \
  --name "Climate Data 2024" \
  --symbol "CLIMATE24" \
  --description "Global climate dataset" \
  --public-columns "timestamp,location,temperature" \
  --private-columns "sensor_id,raw_data,metadata" \
  --proof-set-id 12345 \
  --price "1000000000000000000" \
  --size "107374182400" \
  --network calibrationnet
```

#### NFT Minting & Access Control
**[tasks/nft-factory/mint-nft.js](mdc:tasks/nft-factory/mint-nft.js)** - Mint dataset access tokens:
```bash
npx hardhat mint-nft \
  --registry 0x123...abc \
  --collection 0x456...def \
  --to 0x789...ghi \
  --network calibrationnet
```

**[tasks/nft-factory/batch-mint.js](mdc:tasks/nft-factory/batch-mint.js)** - Bulk access token minting:
```bash
npx hardhat batch-mint \
  --registry 0x123...abc \
  --collection 0x456...def \
  --recipients "0x789...ghi,0xabc...123,0xdef...456" \
  --network calibrationnet
```

#### Collection Queries
**[tasks/nft-factory/get-collections.js](mdc:tasks/nft-factory/get-collections.js)** - Query user collections:
```bash
# Get collections owned by specific user
npx hardhat get-collections \
  --registry 0x123...abc \
  --user 0x789...ghi \
  --network calibrationnet

# Get all active collections
npx hardhat get-active-collections \
  --registry 0x123...abc \
  --network calibrationnet
```

**[tasks/nft-factory/collection-stats.js](mdc:tasks/nft-factory/collection-stats.js)** - Collection analytics:
```bash
npx hardhat collection-stats \
  --registry 0x123...abc \
  --collection 0x456...def \
  --network calibrationnet
```

#### Contract Synchronization
**[tasks/nft-factory/sync-contracts.js](mdc:tasks/nft-factory/sync-contracts.js)** - Update contract ABIs:
```bash
# Sync contract ABIs for CLI/MCP integration
npx hardhat sync-contracts --network calibrationnet
```

### PandoraService Tasks (FWS Integration)

#### Service Provider Management
**[tasks/pandora-service/add-service-provider.js](mdc:tasks/pandora-service/add-service-provider.js)** - Register storage providers:
```bash
npx hardhat add-service-provider \
  --pandora 0x123...abc \
  --provider 0x456...def \
  --pdp-url "https://storage-provider.com/pdp" \
  --retrieval-url "https://storage-provider.com/retrieve" \
  --network calibrationnet
```

**[tasks/pandora-service/approve-provider.js](mdc:tasks/pandora-service/approve-provider.js)** - Approve pending providers:
```bash
npx hardhat approve-provider \
  --pandora 0x123...abc \
  --provider 0x456...def \
  --network calibrationnet
```

**[tasks/pandora-service/list-providers.js](mdc:tasks/pandora-service/list-providers.js)** - List available providers:
```bash
# List all approved providers
npx hardhat list-providers \
  --pandora 0x123...abc \
  --network calibrationnet

# List pending providers (admin only)
npx hardhat list-pending-providers \
  --pandora 0x123...abc \
  --network calibrationnet
```

#### Service Pricing & Configuration
**[tasks/pandora-service/get-pricing.js](mdc:tasks/pandora-service/get-pricing.js)** - Query service pricing:
```bash
npx hardhat get-pricing \
  --pandora 0x123...abc \
  --size "107374182400" \
  --with-cdn true \
  --network calibrationnet
```

## Data Marketplace Workflow

### For Data Owners (Dataset Publishers)

#### 1. Create Dataset Collection
```bash
# Create new dataset collection with metadata
npx hardhat create-collection \
  --registry 0x123...abc \
  --name "Financial Market Data Q4 2024" \
  --symbol "FINQ424" \
  --description "High-frequency trading data for Q4 2024" \
  --public-columns "timestamp,symbol,price,volume" \
  --private-columns "order_id,trader_id,strategy,metadata" \
  --proof-set-id 12345 \
  --price "5000000000000000000" \
  --size "536870912000" \
  --network calibrationnet
```

#### 2. Configure Collection Settings
```bash
# Set public and private data CIDs to activate collection
npx hardhat set-collection-cid \
  --registry 0x123...abc \
  --collection 0x456...def \
  --public-cid "QmPublicDataSample..." \
  --private-cid "QmPrivateFullDataset..." \
  --network calibrationnet

# Activate collection for purchases
npx hardhat toggle-collection-status \
  --registry 0x123...abc \
  --collection 0x456...def \
  --active true \
  --network calibrationnet
```

#### 3. Monitor Sales & Withdraw Earnings
```bash
# Check collection statistics
npx hardhat collection-stats \
  --registry 0x123...abc \
  --collection 0x456...def \
  --network calibrationnet

# Check balance and withdraw earnings
npx hardhat get-balance \
  --registry 0x123...abc \
  --user 0x789...ghi \
  --network calibrationnet

npx hardhat withdraw \
  --registry 0x123...abc \
  --network calibrationnet
```

### For Data Buyers (Dataset Consumers)

#### 1. Browse Available Datasets
```bash
# View all active dataset collections
npx hardhat get-active-collections \
  --registry 0x123...abc \
  --network calibrationnet

# Get details for specific collection
npx hardhat get-collection-details \
  --registry 0x123...abc \
  --collection 0x456...def \
  --network calibrationnet
```

#### 2. Purchase Dataset Access
```bash
# First approve token spending
npx hardhat approve-token \
  --token 0xabc...123 \
  --spender 0x123...abc \
  --amount "5000000000000000000" \
  --network calibrationnet

# Purchase dataset access (mints NFT)
npx hardhat purchase-dataset \
  --registry 0x123...abc \
  --collection 0x456...def \
  --network calibrationnet
```

#### 3. Verify Access & Use Data
```bash
# Check if user has access NFT
npx hardhat has-nft \
  --registry 0x123...abc \
  --collection 0x456...def \
  --user 0x789...ghi \
  --network calibrationnet

# Get owned collections
npx hardhat get-collections \
  --registry 0x123...abc \
  --user 0x789...ghi \
  --network calibrationnet
```

### For Storage Providers

#### 1. Register as Service Provider
```bash
# Register with PandoraService
npx hardhat add-service-provider \
  --pandora 0x123...abc \
  --provider 0x456...def \
  --pdp-url "https://my-storage.com/pdp" \
  --retrieval-url "https://my-storage.com/retrieve" \
  --network calibrationnet
```

#### 2. Wait for Approval
```bash
# Check approval status
npx hardhat list-providers \
  --pandora 0x123...abc \
  --network calibrationnet
```

#### 3. Manage Storage & Proofs
```bash
# Monitor proof requirements (external system integration)
# Submit proofs to PDPVerifier (handled by storage provider software)
# Manage payment rails and earnings (via PandoraService)
```

## Integration Development

### CLI Integration Updates
When contracts are updated, sync ABIs for external tools:

```bash
# Update CLI contract interfaces
npx hardhat sync-contracts --network calibrationnet
```

This updates:
- **../cli/lib/contracts/FDBRegistry.json** - CLI contract interface
- **../cli/lib/contracts/FDBRegistry.js** - CLI contract wrapper  
- **../mcp/lib/contracts/FDBRegistry.json** - MCP contract ABI
- **../mcp/lib/contracts/FDBRegistry.js** - MCP contract wrapper

### Environment Configuration
```bash
# Development environment
cp .env.example .env.development

# Testnet environment  
cp .env.example .env.testnet

# Production environment
cp .env.example .env.production
```

### Testing Workflow

#### Unit Testing
```bash
# Run contract unit tests
npm run test

# Run with coverage
npm run coverage

# Test specific contract
npx hardhat test test/FDBRegistry.test.js
```

#### Integration Testing
```bash
# Deploy to local testnet
npx hardhat deploy --network localhost

# Run end-to-end tests
npm run test:integration

# Test specific workflows
npx hardhat test test/integration/marketplace-flow.test.js
```

## Debugging & Monitoring

### Contract State Inspection
```bash
# Check contract deployment status
npx hardhat deployments:list --network calibrationnet

# Verify contract addresses
npx hardhat call FDBRegistry pandoraService --network calibrationnet
npx hardhat call PandoraService paymentsContractAddress --network calibrationnet

# Check contract balances
npx hardhat get-balance --registry 0x123...abc --user 0x789...ghi --network calibrationnet
```

### Event Monitoring
```bash
# Monitor collection creation events
npx hardhat events FDBRegistry CollectionCreated --network calibrationnet

# Monitor purchase events
npx hardhat events FDBRegistry NFTPurchased --network calibrationnet

# Monitor provider events
npx hardhat events PandoraService ProviderApproved --network calibrationnet
```

### Gas Optimization Testing
```bash
# Test gas usage for common operations
npx hardhat gas-report --network calibrationnet

# Profile specific transactions
npx hardhat profile-tx --tx-hash 0x123...abc --network calibrationnet
```

## Production Deployment Workflow

### Pre-Deployment Checklist
1. **Environment Variables**: All required addresses configured
2. **Dependency Contracts**: PDPVerifier, Payments, USDFC deployed
3. **Service Providers**: Provider addresses and URLs ready
4. **Testing**: Full integration testing completed
5. **Gas Estimation**: Sufficient FIL for deployment

### Deployment Process
```bash
# 1. Deploy to testnet first
npx hardhat deploy --network calibrationnet

# 2. Test all functionality
npm run test:integration:testnet

# 3. Deploy to mainnet
npx hardhat deploy --network mainnet

# 4. Verify and sync contracts
npx hardhat sync-contracts --network mainnet
```

### Post-Deployment Tasks
```bash
# 1. Add initial service providers
npx hardhat add-service-provider --pandora <address> --provider <address> --network mainnet

# 2. Create sample collections for testing
npx hardhat create-collection --registry <address> --name "Sample" --network mainnet

# 3. Monitor contract events and performance
npx hardhat events FDBRegistry --network mainnet --from-block latest
```

## Troubleshooting

### Common Development Issues

#### Contract Compilation Errors
```bash
Error: Contract source not found
```
**Solution**: Ensure all imports are correct and contracts exist

#### Task Execution Failures
```bash
Error: Contract not deployed
```
**Solution**: Deploy contracts before running tasks or check network configuration

#### Gas Estimation Issues
```bash
Error: gas required exceeds allowance
```  
**Solution**: Check contract state and ensure sufficient token balances

#### Network Connection Problems
```bash
Error: network does not respond
```
**Solution**: Verify RPC URL and network connectivity

### Recovery Procedures

#### Partial Deployment Recovery
```bash
# Check what's deployed
npx hardhat deployments:list --network calibrationnet

# Continue deployment from specific stage
npx hardhat deploy --tags FDBRegistry --network calibrationnet
```

#### Contract State Reset
```bash
# Clear deployment cache if needed
rm -rf deployments/calibrationnet/

# Redeploy from scratch
npx hardhat deploy --network calibrationnet --reset
```
