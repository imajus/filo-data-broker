---
description: 
globs: 
alwaysApply: false
---
# Hardhat Tasks & CLI Commands

## Task System Overview

The project uses Hardhat's task system to provide a CLI interface for interacting with deployed contracts. All tasks are organized in the **[tasks/](mdc:tasks)** directory and exported through **[tasks/index.js](mdc:tasks/index.js)**.

## Available Tasks

### Collection Management

#### Create Collection
**File**: [create-collection.js](mdc:tasks/nft-factory/create-collection.js)
```bash
npx hardhat create-collection \
  --factory <NFTFactory_address> \
  --name "My NFT Collection" \
  --symbol "MNC" \
  --baseuri "ipfs://QmYourHashHere/" \
  --network calibrationnet
```

#### Get User Collections
**File**: [get-collections.js](mdc:tasks/nft-factory/get-collections.js)
```bash
npx hardhat get-collections \
  --factory <NFTFactory_address> \
  --user <user_address> \
  --network calibrationnet
```

#### Collection Statistics
**File**: [collection-stats.js](mdc:tasks/nft-factory/collection-stats.js)
```bash
npx hardhat collection-stats \
  --factory <NFTFactory_address> \
  --collection <NFT_contract_address> \
  --network calibrationnet
```

### NFT Minting

#### Single NFT Mint
**File**: [mint-nft.js](mdc:tasks/nft-factory/mint-nft.js)
```bash
npx hardhat mint-nft \
  --factory <NFTFactory_address> \
  --collection <NFT_contract_address> \
  --to <recipient_address> \
  --network calibrationnet
```

#### Batch Mint
**File**: [batch-mint.js](mdc:tasks/nft-factory/batch-mint.js)
```bash
npx hardhat batch-mint \
  --factory <NFTFactory_address> \
  --collection <NFT_contract_address> \
  --recipients <address1,address2,address3> \
  --network calibrationnet
```

## Task Implementation Pattern

All tasks follow a consistent pattern:

```javascript
const { task } = require("hardhat/config")

task("task-name", "Task description")
    .addParam("param1", "Parameter description")
    .addParam("param2", "Another parameter")
    .setAction(async (taskArgs) => {
        const { param1, param2 } = taskArgs
        
        // Get contract instance
        const contract = await ethers.getContractAt("ContractName", address)
        
        // Execute transaction
        const tx = await contract.someFunction(param1, param2)
        const receipt = await tx.wait()
        
        // Parse events and log results
        console.log(`Transaction hash: ${tx.hash}`)
    })
```

## Network Configuration

Tasks support multiple networks configured in [hardhat.config.js](mdc:hardhat.config.js):

- **localnet**: Local development (chainId: 31415926)
- **calibrationnet**: Filecoin testnet (chainId: 314159) - **Default**
- **filecoinmainnet**: Filecoin mainnet (chainId: 314)

## Environment Setup

1. **Set Private Key**: Add `PRIVATE_KEY` to `.env` file
2. **Deploy Factory**: `npx hardhat deploy --network calibrationnet`
3. **Use Factory Address**: Copy deployed address for task commands

## Task Development Guidelines

### Parameter Naming:
- Use lowercase with hyphens for consistency
- Provide clear descriptions for each parameter
- Include required vs optional parameter documentation

### Error Handling:
- Wrap contract calls in try-catch blocks
- Provide meaningful error messages
- Log transaction hashes for debugging

### Event Parsing:
- Extract relevant information from transaction receipts
- Log important data like addresses and IDs
- Use events to confirm successful operations

### Gas Optimization:
- Use batch operations when possible
- Estimate gas before execution for large operations
- Provide gas estimation feedback to users

# Tasks & CLI Integration

## CLI Task System Overview

The project provides comprehensive CLI integration through Hardhat tasks, supporting both the data marketplace (FDBRegistry) and the FWS service infrastructure (PandoraService).

### Task Categories

#### Data Marketplace Tasks (FDBRegistry)
- **Collection Management**: Create, configure, and query dataset collections
- **NFT Operations**: Mint access tokens and manage ownership
- **Purchase Flow**: Handle dataset purchases and payments
- **Analytics**: Collection statistics and user analytics

#### FWS Service Tasks (PandoraService)  
- **Provider Management**: Register, approve, and manage storage providers
- **Payment Rails**: Configure payment channels and lockups
- **Service Configuration**: Pricing, commissions, and service levels
- **Monitoring**: Provider performance and payment status

#### System Tasks
- **Contract Synchronization**: Update ABIs for CLI/MCP integration
- **Deployment Support**: Post-deployment configuration and verification

## FDBRegistry Tasks (Data Marketplace)

### Collection Creation & Management

#### create-collection.js
**[tasks/nft-factory/create-collection.js](mdc:tasks/nft-factory/create-collection.js)** - Create new dataset collections:

```bash
# Full collection creation with all parameters
npx hardhat create-collection \
  --registry 0x123...abc \
  --name "Climate Data 2024" \
  --symbol "CLIMATE24" \
  --description "Comprehensive climate dataset for 2024" \
  --public-columns "timestamp,location,temperature,humidity" \
  --private-columns "sensor_id,raw_data,calibration,metadata" \
  --proof-set-id 12345 \
  --price "1000000000000000000" \
  --size "107374182400" \
  --network calibrationnet

# Minimal collection creation
npx hardhat create-collection \
  --registry 0x123...abc \
  --name "Simple Dataset" \
  --symbol "SIMPLE" \
  --price "500000000000000000" \
  --network calibrationnet
```

**Parameters**:
- `--registry`: FDBRegistry contract address (required)
- `--name`: Human-readable collection name (required)  
- `--symbol`: Collection symbol/ticker (required)
- `--description`: Dataset description (optional)
- `--public-columns`: Comma-separated public data columns (optional)
- `--private-columns`: Comma-separated private data columns (optional)
- `--proof-set-id`: PDP proof set ID for verification (optional)
- `--price`: Purchase price in wei (USDFC tokens) (required)
- `--size`: Dataset size in bytes (optional)

#### Collection Configuration Tasks

**Set Collection CIDs** (activates collection for purchases):
```bash
npx hardhat set-collection-cid \
  --registry 0x123...abc \
  --collection 0x456...def \
  --public-cid "QmPublicDataHash..." \
  --private-cid "QmPrivateDataHash..." \
  --network calibrationnet
```

**Toggle Collection Status**:
```bash
# Activate collection
npx hardhat toggle-collection-status \
  --registry 0x123...abc \
  --collection 0x456...def \
  --active true \
  --network calibrationnet

# Deactivate collection  
npx hardhat toggle-collection-status \
  --registry 0x123...abc \
  --collection 0x456...def \
  --active false \
  --network calibrationnet
```

### NFT Minting & Access Control

#### mint-nft.js
**[tasks/nft-factory/mint-nft.js](mdc:tasks/nft-factory/mint-nft.js)** - Mint individual dataset access NFTs:

```bash
# Mint NFT to specific address
npx hardhat mint-nft \
  --registry 0x123...abc \
  --collection 0x456...def \
  --to 0x789...ghi \
  --network calibrationnet

# Mint NFT to multiple addresses (separate commands)
npx hardhat mint-nft --registry 0x123...abc --collection 0x456...def --to 0x111...111 --network calibrationnet
npx hardhat mint-nft --registry 0x123...abc --collection 0x456...def --to 0x222...222 --network calibrationnet
```

#### batch-mint.js
**[tasks/nft-factory/batch-mint.js](mdc:tasks/nft-factory/batch-mint.js)** - Efficient bulk NFT minting:

```bash
# Batch mint to multiple recipients
npx hardhat batch-mint \
  --registry 0x123...abc \
  --collection 0x456...def \
  --recipients "0x789...ghi,0xabc...123,0xdef...456" \
  --network calibrationnet

# Large batch (up to 100 recipients)
npx hardhat batch-mint \
  --registry 0x123...abc \
  --collection 0x456...def \
  --recipients-file recipients.txt \
  --network calibrationnet
```

### Collection Queries & Analytics

#### get-collections.js
**[tasks/nft-factory/get-collections.js](mdc:tasks/nft-factory/get-collections.js)** - Query collections by user or status:

```bash
# Get collections owned by specific user
npx hardhat get-collections \
  --registry 0x123...abc \
  --user 0x789...ghi \
  --network calibrationnet

# Get all collections in registry
npx hardhat get-all-collections \
  --registry 0x123...abc \
  --network calibrationnet

# Get only active collections (purchasable)
npx hardhat get-active-collections \
  --registry 0x123...abc \
  --network calibrationnet
```

#### collection-stats.js  
**[tasks/nft-factory/collection-stats.js](mdc:tasks/nft-factory/collection-stats.js)** - Detailed collection analytics:

```bash
# Get comprehensive collection statistics
npx hardhat collection-stats \
  --registry 0x123...abc \
  --collection 0x456...def \
  --network calibrationnet

# Output includes:
# - Total NFTs minted
# - Revenue generated  
# - Active status
# - CID information
# - Proof set details
```

### Purchase & Payment Flow

#### Purchase Dataset Access
```bash
# First approve token spending
npx hardhat approve-token \
  --token 0xabc...123 \
  --spender 0x123...abc \
  --amount "1000000000000000000" \
  --network calibrationnet

# Purchase dataset access (mints NFT automatically)
npx hardhat purchase-dataset \
  --registry 0x123...abc \
  --collection 0x456...def \
  --network calibrationnet
```

#### Access Verification
```bash
# Check if user has access NFT
npx hardhat has-nft \
  --registry 0x123...abc \
  --collection 0x456...def \
  --user 0x789...ghi \
  --network calibrationnet

# Get user's token ID in collection  
npx hardhat get-user-token \
  --registry 0x123...abc \
  --collection 0x456...def \
  --user 0x789...ghi \
  --network calibrationnet
```

#### Balance Management
```bash
# Check user balance in registry
npx hardhat get-balance \
  --registry 0x123...abc \
  --user 0x789...ghi \
  --network calibrationnet

# Withdraw accumulated earnings
npx hardhat withdraw \
  --registry 0x123...abc \
  --network calibrationnet
```

## PandoraService Tasks (FWS Integration)

### Service Provider Management

#### add-service-provider.js
**[tasks/pandora-service/add-service-provider.js](mdc:tasks/pandora-service/add-service-provider.js)** - Register new storage providers:

```bash
# Register storage provider
npx hardhat add-service-provider \
  --pandora 0x123...abc \
  --provider 0x456...def \
  --pdp-url "https://storage-provider.com/pdp" \
  --retrieval-url "https://storage-provider.com/retrieve" \
  --network calibrationnet

# Register provider with custom endpoints
npx hardhat add-service-provider \
  --pandora 0x123...abc \
  --provider 0x789...ghi \
  --pdp-url "https://premium-storage.com/api/pdp" \
  --retrieval-url "https://cdn.premium-storage.com/retrieve" \
  --network calibrationnet
```

#### approve-provider.js
**[tasks/pandora-service/approve-provider.js](mdc:tasks/pandora-service/approve-provider.js)** - Approve pending providers (admin only):

```bash
# Approve pending provider
npx hardhat approve-provider \
  --pandora 0x123...abc \
  --provider 0x456...def \
  --network calibrationnet

# Batch approve multiple providers
npx hardhat batch-approve-providers \
  --pandora 0x123...abc \
  --providers "0x456...def,0x789...ghi,0xabc...123" \
  --network calibrationnet
```

#### Provider Queries

**[tasks/pandora-service/list-providers.js](mdc:tasks/pandora-service/list-providers.js)** - List and query providers:

```bash
# List all approved providers
npx hardhat list-providers \
  --pandora 0x123...abc \
  --network calibrationnet

# List pending providers (admin view)
npx hardhat list-pending-providers \
  --pandora 0x123...abc \
  --network calibrationnet

# Get specific provider details
npx hardhat get-provider-details \
  --pandora 0x123...abc \
  --provider 0x456...def \
  --network calibrationnet
```

### Service Configuration & Pricing

#### get-pricing.js
**[tasks/pandora-service/get-pricing.js](mdc:tasks/pandora-service/get-pricing.js)** - Query service pricing:

```bash
# Get pricing for basic service
npx hardhat get-pricing \
  --pandora 0x123...abc \
  --size "107374182400" \
  --with-cdn false \
  --network calibrationnet

# Get pricing for CDN service
npx hardhat get-pricing \
  --pandora 0x123...abc \
  --size "1073741824000" \
  --with-cdn true \
  --network calibrationnet

# Calculate monthly costs
npx hardhat calculate-monthly-cost \
  --pandora 0x123...abc \
  --size-tib "1.5" \
  --service-type "cdn" \
  --network calibrationnet
```

#### Service Configuration
```bash
# Update operator commission rates
npx hardhat set-commission-rate \
  --pandora 0x123...abc \
  --basic-rate "500" \
  --cdn-rate "4000" \
  --network calibrationnet

# Update service pricing
npx hardhat set-service-pricing \
  --pandora 0x123...abc \
  --basic-price "2000000000000000000" \
  --cdn-price "3000000000000000000" \
  --network calibrationnet
```

### Payment Rail Management

#### Rail Operations
```bash
# Create payment rail
npx hardhat create-rail \
  --pandora 0x123...abc \
  --payer 0x456...def \
  --payee 0x789...ghi \
  --proof-set-id 12345 \
  --with-cdn true \
  --network calibrationnet

# Increase rail lockup
npx hardhat increase-lockup \
  --pandora 0x123...abc \
  --proof-set-id 12345 \
  --amount "5000000000000000000" \
  --network calibrationnet

# Check rail status
npx hardhat get-rail-status \
  --pandora 0x123...abc \
  --rail-id 67890 \
  --network calibrationnet
```

## System Tasks

### Contract Synchronization

#### sync-contracts.js
**[tasks/nft-factory/sync-contracts.js](mdc:tasks/nft-factory/sync-contracts.js)** - Update contract ABIs for integration:

```bash
# Sync all contract ABIs
npx hardhat sync-contracts --network calibrationnet

# Sync specific contract only
npx hardhat sync-contracts \
  --contract FDBRegistry \
  --network calibrationnet

# Force resync (overwrite existing)
npx hardhat sync-contracts \
  --force \
  --network calibrationnet
```

**What it updates**:
- **../cli/lib/contracts/FDBRegistry.json** - CLI contract interface
- **../cli/lib/contracts/FDBRegistry.js** - CLI wrapper functions
- **../mcp/lib/contracts/FDBRegistry.json** - MCP contract ABI  
- **../mcp/lib/contracts/FDBRegistry.js** - MCP integration wrapper

### Deployment Support Tasks

#### Post-Deployment Configuration
```bash
# Initialize newly deployed contracts
npx hardhat post-deploy-setup \
  --registry 0x123...abc \
  --pandora 0x456...def \
  --network calibrationnet

# Add default service providers
npx hardhat setup-default-providers \
  --pandora 0x456...def \
  --network calibrationnet

# Verify deployment integrity
npx hardhat verify-deployment \
  --registry 0x123...abc \
  --pandora 0x456...def \
  --network calibrationnet
```

## Usage Patterns & Best Practices

### Development Workflow

#### 1. Initial Setup
```bash
# Deploy contracts
npx hardhat deploy --network calibrationnet

# Sync ABIs for CLI integration
npx hardhat sync-contracts --network calibrationnet

# Setup initial providers
npx hardhat setup-default-providers --pandora <address> --network calibrationnet
```

#### 2. Create Test Collection
```bash
# Create test dataset
npx hardhat create-collection \
  --registry <address> \
  --name "Test Dataset" \
  --symbol "TEST" \
  --price "1000000000000000000" \
  --network calibrationnet

# Set test CIDs
npx hardhat set-collection-cid \
  --registry <address> \
  --collection <address> \
  --public-cid "QmTestPublic..." \
  --private-cid "QmTestPrivate..." \
  --network calibrationnet
```

#### 3. Test Purchase Flow
```bash
# Approve tokens
npx hardhat approve-token \
  --token <usdfc-address> \
  --spender <registry-address> \
  --amount "1000000000000000000" \
  --network calibrationnet

# Purchase access
npx hardhat purchase-dataset \
  --registry <address> \
  --collection <address> \
  --network calibrationnet

# Verify access
npx hardhat has-nft \
  --registry <address> \
  --collection <address> \
  --user <buyer-address> \
  --network calibrationnet
```

### Production Workflow

#### Data Owner Operations
```bash
# 1. Create production collection
npx hardhat create-collection \
  --registry <registry-address> \
  --name "Production Dataset Q4 2024" \
  --symbol "PRODQ424" \
  --description "High-value production dataset" \
  --public-columns "timestamp,category,summary" \
  --private-columns "user_id,transaction_data,sensitive_metrics" \
  --proof-set-id 98765 \
  --price "10000000000000000000" \
  --size "5368709120000" \
  --network mainnet

# 2. Upload data and get CIDs
# (External process using IPFS/Filecoin storage)

# 3. Activate collection
npx hardhat set-collection-cid \
  --registry <registry-address> \
  --collection <collection-address> \
  --public-cid "QmProdPublic..." \
  --private-cid "QmProdPrivate..." \
  --network mainnet

# 4. Monitor sales
npx hardhat collection-stats \
  --registry <registry-address> \
  --collection <collection-address> \
  --network mainnet
```

#### Storage Provider Operations
```bash
# 1. Register as provider
npx hardhat add-service-provider \
  --pandora <pandora-address> \
  --provider <provider-address> \
  --pdp-url "https://enterprise-storage.com/pdp" \
  --retrieval-url "https://enterprise-storage.com/retrieve" \
  --network mainnet

# 2. Monitor approval status
npx hardhat list-providers \
  --pandora <pandora-address> \
  --network mainnet

# 3. Check earnings and rails
npx hardhat get-provider-earnings \
  --pandora <pandora-address> \
  --provider <provider-address> \
  --network mainnet
```

## Error Handling & Troubleshooting

### Common Task Errors

#### Network Connection Issues
```bash
Error: network does not respond
```
**Solution**: Check RPC URL in hardhat.config.js and network connectivity

#### Contract Not Found
```bash
Error: Contract not deployed
```
**Solution**: Deploy contracts first or verify contract addresses

#### Insufficient Gas
```bash
Error: gas required exceeds allowance
```
**Solution**: Check gas limits and account balance

#### Permission Errors
```bash
Error: caller is not the owner
```
**Solution**: Ensure correct account is being used for admin operations

### Debugging Commands

#### Contract State Inspection
```bash
# Check deployment status
npx hardhat deployments:list --network calibrationnet

# Verify contract addresses
npx hardhat call FDBRegistry pandoraService --network calibrationnet
npx hardhat call PandoraService paymentsContractAddress --network calibrationnet

# Check contract balances
npx hardhat ethers getBalance <address> --network calibrationnet
```

#### Event Monitoring
```bash
# Monitor specific events
npx hardhat events FDBRegistry CollectionCreated --network calibrationnet
npx hardhat events FDBRegistry NFTPurchased --network calibrationnet
npx hardhat events PandoraService ProviderApproved --network calibrationnet
```

This comprehensive CLI system provides all necessary tools for managing the data marketplace, from collection creation to purchase processing to provider management.
