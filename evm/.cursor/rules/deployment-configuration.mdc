---
description: Describes environment variables and deployment process.
globs: 
alwaysApply: false
---
# Deployment Configuration & Environment Setup

## Environment Variables

### Required Variables

#### Core Contract Dependencies
```bash
# PDP Verification System
PDP_VERIFIER_ADDRESS=0x...                    # PDPVerifier contract address
PAYMENTS_CONTRACT_ADDRESS=0x...               # FWS Payments contract address
USDFC_TOKEN_ADDRESS=0x...                     # Payment token (USDFC) contract address

# Optional Configuration
INITIAL_OPERATOR_COMMISSION_BPS=500           # Operator commission in basis points (5%)
```

#### Wallet & Network Configuration
```bash
# Wallet Configuration
PRIVATE_KEY=abcdef...                         # Deployer private key
RPC_URL=https://api.calibration.node.glif.io/rpc/v1  # Network RPC endpoint
ETHERSCAN_API_KEY=your_api_key               # For contract verification
```

**Security Warning**: Never commit `.env` files containing private keys to public repositories!

### Environment Setup Process

1. **Create Environment File**:
   ```bash
   cp .env.example .env
   ```

2. **Configure Required Variables**: Add all required contract addresses and configuration
3. **Fund Deployer**: Ensure deployer address has sufficient FIL for gas fees
4. **Validate Dependencies**: Confirm all referenced contracts exist on target network

## Deployment Architecture

### Two-Stage Deployment Process

The project uses a sequential deployment pattern with dependency management:

#### Stage 1: PandoraService Deployment
**[deploy/00_pandora.js](mdc:deploy/00_pandora.js)** deploys the core FWS service infrastructure:

```javascript
// Environment validation
const pdpVerifierAddress = process.env.PDP_VERIFIER_ADDRESS
const paymentsContractAddress = process.env.PAYMENTS_CONTRACT_ADDRESS  
const usdfcTokenAddress = process.env.USDFC_TOKEN_ADDRESS
const initialOperatorCommissionBps = process.env.INITIAL_OPERATOR_COMMISSION_BPS || "500"

// Deploy with proxy pattern
const pandoraService = await deploy("PandoraService", {
    proxy: {
        proxyContract: "ERC1967Proxy",
        execute: {
            init: {
                methodName: "initialize",
                args: [pdpVerifierAddress, paymentsContractAddress, usdfcTokenAddress, initialOperatorCommissionBps]
            }
        }
    }
})
```

**Features**:
- **Proxy Pattern**: Uses ERC1967 proxy for upgradability
- **Service Provider Setup**: Automatically adds pre-configured storage providers
- **Contract Verification**: Automatic verification on block explorers
- **Initialization**: Configures PDP integration and payment parameters

#### Stage 2: FDBRegistry Deployment  
**[deploy/01_registry.js](mdc:deploy/01_registry.js)** deploys the data marketplace registry:

```javascript
// Dependency resolution
const pandoraService = await get("PandoraService")
const paymentToken = process.env.USDFC_TOKEN_ADDRESS

// Deploy registry with dependencies
const constructorArgs = [paymentToken, pandoraService.address]
const fdbRegistry = await deploy("FDBRegistry", {
    args: constructorArgs,
    dependencies: ["PandoraService"]
})
```

**Features**:
- **Dependency Management**: Requires PandoraService deployment first
- **Contract Integration**: Links registry to PandoraService for payment processing
- **ABI Synchronization**: Runs `sync-contracts` task for CLI/MCP integration

### Service Provider Configuration

The deployment process automatically configures storage providers:

```javascript
const providers = [
    {
        provider: "0xe9bc394383B67aBcEbe86FD9843F53d8B4a2E981",
        pdpUrl: "https://polynomial.computer/",
        pieceRetrievalUrl: "https://polynomial.computer/"
    },
    {
        provider: "0x4A628ebAecc32B8779A934ebcEffF1646F517756", 
        pdpUrl: "https://pdp.zapto.org/",
        pieceRetrievalUrl: "https://pdp.zapto.org/"
    }
    // Additional providers...
]
```

## Network Configuration

### Supported Networks

#### Filecoin Calibration Testnet (Default)
```javascript
calibrationnet: {
    chainId: 314159,
    url: "https://api.calibration.node.glif.io/rpc/v1",
    accounts: [process.env.PRIVATE_KEY],
    gasPrice: 10000000000, // 10 gwei
    blockGasLimit: 1000000000
}
```

#### Filecoin Mainnet
```javascript
mainnet: {
    chainId: 314,
    url: "https://api.node.glif.io",
    accounts: [process.env.PRIVATE_KEY],
    gasPrice: 10000000000
}
```

#### Local Development
```javascript
localnet: {
    chainId: 31415926,
    url: "http://127.0.0.1:1234/rpc/v1",
    accounts: [process.env.PRIVATE_KEY]
}
```

### Block Explorer Integration

Contracts are automatically verified on appropriate block explorers:
- **Calibration**: Filecoin testnet Blockscout
- **Mainnet**: Filecoin mainnet Blockscout
- **Local**: No verification (development only)

## Deployment Commands

### Full Infrastructure Deployment
```bash
# Deploy both PandoraService and FDBRegistry
npx hardhat deploy --network calibrationnet
```

### Individual Contract Deployment
```bash
# Deploy only PandoraService
npx hardhat deploy --tags PandoraService --network calibrationnet

# Deploy only FDBRegistry (requires PandoraService)
npx hardhat deploy --tags FDBRegistry --network calibrationnet
```

### Deployment Verification
```bash
# Check deployment status
npx hardhat --network calibrationnet etherscan-verify

# Manual contract verification
npx hardhat verify --network calibrationnet <contract_address> <constructor_args>
```

## Post-Deployment Integration

### Contract ABI Synchronization

The deployment process automatically runs contract synchronization:

```bash
# Automatic execution via deploy script
npx hardhat sync-contracts

# Manual execution if needed
npx hardhat sync-contracts --network calibrationnet
```

This updates:
- **CLI Integration**: Updates contract ABIs in `../cli/lib/contracts/`
- **MCP Integration**: Updates contract ABIs in `../mcp/lib/contracts/`
- **JSON Artifacts**: Generates contract JSON files for external integration

### Environment Validation

Before deployment, the system validates:

1. **Contract Dependencies**: All required contract addresses exist
2. **Network Connectivity**: RPC endpoint accessibility
3. **Account Balance**: Sufficient FIL for deployment gas costs
4. **Private Key**: Valid deployer account access

### Deployment Output

Successful deployment provides:

```bash
Wallet Ethereum Address: 0x...
PDP Verifier Address: 0x...
Payments Contract Address: 0x...
USDFC Token Address: 0x...
PandoraService deployed to: 0x...
PandoraService implementation: 0x...
FDBRegistry deployed to: 0x...
```

**Important**: Save all deployed contract addresses for CLI and integration usage.

## Gas Optimization

### Deployment Settings
```javascript
solidity: {
    version: "0.8.23",
    settings: {
        optimizer: {
            enabled: true,
            runs: 1000  // Optimized for frequent contract interaction
        }
    }
}
```

### Gas Estimation
- **PandoraService**: ~3-4M gas (proxy + implementation)
- **FDBRegistry**: ~2-3M gas (main contract)
- **Service Provider Setup**: ~200k gas per provider

### Cost Management
- **Batch Operations**: Service provider setup in single transaction
- **Proxy Pattern**: Reduces redeployment costs for PandoraService
- **Verification Delay**: 45-second delay prevents verification failures

## Troubleshooting

### Common Issues

#### Environment Variable Errors
```bash
Error: PDP_VERIFIER_ADDRESS environment variable is required
```
**Solution**: Ensure all required environment variables are set in `.env`

#### Deployment Dependency Errors
```bash
Error: Could not find deployment for PandoraService
```
**Solution**: Deploy PandoraService first or run full deployment

#### Gas Estimation Failures
```bash
Error: gas required exceeds allowance
```
**Solution**: Increase gas limit or check account balance

#### Contract Verification Issues
```bash
Error: contract verification failed
```
**Solution**: Wait for block confirmations before verification

### Recovery Procedures

#### Partial Deployment Recovery
```bash
# Check existing deployments
npx hardhat --network calibrationnet deployments:list

# Continue from failed stage
npx hardhat deploy --tags FDBRegistry --network calibrationnet
```

#### Contract State Validation
```bash
# Verify contract initialization
npx hardhat --network calibrationnet call PandoraService paymentsContractAddress
npx hardhat --network calibrationnet call FDBRegistry pandoraService
```
