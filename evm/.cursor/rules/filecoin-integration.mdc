---
description: 
globs: contracts/FDBRegistry.sol
alwaysApply: false
---
# Filecoin Integration & PDP Verification

## Overview

This project integrates deeply with the Filecoin ecosystem through multiple layers:
- **FEVM Compatibility**: Runs on Filecoin EVM (calibrationnet/mainnet)  
- **PDP Verification**: Provable Data Possession ensures data integrity
- **FWS Payments**: Enterprise payment rails with dynamic pricing and commission rates
- **Service Provider Registry**: Multi-step provider registration and approval system
- **IPFS Storage**: Content-addressed storage for dataset metadata
- **CAR Files**: Content Addressable aRchives for efficient data transfer

## Enhanced Payment Architecture

### Reserve Cost System

The system now implements a **7-day reserve cost** mechanism for guaranteed storage availability:

#### Reserve Cost Calculation
- **Reserve Period**: 7 days (configured in `RESERVE_PERIOD_DAYS`)
- **Daily Cost**: Retrieved from PandoraService based on proof set size and service type
- **Total Reserve**: Daily cost × 7 days

#### Purchase Flow with Reserve Costs
```solidity
// Enhanced purchase calculation
uint256 collectionPrice = 1000000000000000000; // 1 USDFC
uint256 reserveCost = registry.getCollectionReserveCost(collectionAddress);
uint256 totalPayment = collectionPrice + reserveCost;

// Payment distribution:
// - 10% deployer fee (from collection price)
// - 80% to data owner (collection price - deployer fee + reserve cost)
// - Reserve cost extends lockup period via PandoraService
```

### Dynamic Commission Rates

**[PandoraService.sol](mdc:contracts/fws/PandoraService.sol)** now supports service-tier-based pricing:

#### Service Types & Pricing
- **Basic Service**: 2 USDFC per TiB per month (5% commission)
- **CDN Service**: 3 USDFC per TiB per month (40% commission)
- **Commission Rates**: Dynamically set based on CDN add-on selection

#### Pricing Constants
```solidity
uint256 public constant PRICE_PER_TIB_PER_MONTH_NO_CDN = 2; // 2 USDFC/TiB/month
uint256 public constant PRICE_PER_TIB_PER_MONTH_WITH_CDN = 3; // 3 USDFC/TiB/month
uint256 public constant EPOCHS_PER_DAY = 2880;
uint256 public constant EPOCHS_PER_MONTH = EPOCHS_PER_DAY * 30;
```

### Enhanced Payment Distribution

**[FDBRegistry.sol](mdc:contracts/FDBRegistry.sol)** now implements sophisticated payment splitting:

#### Payment Flow
1. **Collection Price**: Set by data owner
2. **Reserve Cost**: Calculated dynamically based on storage requirements
3. **Total Payment**: Collection price + reserve cost
4. **Fee Distribution**:
   - 10% deployer fee (from collection price only)
   - 80% to data owner (collection price - deployer fee + full reserve cost)
   - Reserve cost triggers lockup period extension

#### New Payment Functions
```javascript
// Get reserve cost for collection
const reserveCost = await registry.getCollectionReserveCost(collectionAddress);

// Get effective total price (collection + reserve)
const totalPrice = await registry.getCollectionEffectivePrice(collectionAddress);

// Check user's pending balance
const balance = await registry.getBalance(userAddress);
```

## Service Provider Registry System

### Multi-Step Provider Registration

**[PandoraService.sol](mdc:contracts/fws/PandoraService.sol)** now includes a comprehensive provider registry:

#### Registration Process
1. **Provider Registration**: Storage provider submits registration
2. **Admin Approval**: Contract owner approves/rejects providers
3. **Active Status**: Only approved providers can receive proof sets

#### Provider Information Structure
```solidity
struct ApprovedProviderInfo {
    address owner;           // Provider's address
    string pdpUrl;          // PDP service endpoint
    string pieceRetrievalUrl; // Data retrieval endpoint
    uint256 registeredAt;    // Registration timestamp
    uint256 approvedAt;      // Approval timestamp
}
```

### Current Registered Providers

**[deploy/00_pandora.js](mdc:deploy/00_pandora.js)** automatically registers three providers:

```javascript
const providers = [
    {
        provider: "0xe9bc394383B67aBcEbe86FD9843F53d8B4a2E981",
        pdpUrl: "https://polynomial.computer/",
        pieceRetrievalUrl: "https://polynomial.computer/",
    },
    {
        provider: "0x4A628ebAecc32B8779A934ebcEffF1646F517756",
        pdpUrl: "https://pdp.zapto.org/",
        pieceRetrievalUrl: "https://pdp.zapto.org/",
    },
    {
        provider: "0x9f5087A1821eb3Ed8a137be368E5e451166EFAAe",
        pdpUrl: "https://yablu.net",
        pieceRetrievalUrl: "https://yablu.net",
    },
]
```

### Provider Management Commands

#### Register New Provider
```bash
# Register provider (pending approval)
npx hardhat add-service-provider \
  --pandora 0x123...abc \
  --provider 0x456...def \
  --pdp-url "https://my-provider.com/pdp" \
  --retrieval-url "https://my-provider.com/retrieve" \
  --network calibrationnet
```

#### Approve Provider
```bash
# Approve pending provider (admin only)
npx hardhat approve-provider \
  --pandora 0x123...abc \
  --provider 0x456...def \
  --network calibrationnet
```

#### List Providers
```bash
# List all approved providers
npx hardhat list-providers \
  --pandora 0x123...abc \
  --network calibrationnet
```

## EIP-712 Signature Verification

### Proof Set Creation with Signatures

The system now requires client signatures for proof set creation:

#### Signature Types
```solidity
// EIP-712 type hashes
bytes32 private constant CREATE_PROOFSET_TYPEHASH =
    keccak256("CreateProofSet(uint256 clientDataSetId,bool withCDN,address payee)");
```

#### Signature Verification Process
1. **Client Signs**: Data owner signs proof set creation parameters
2. **Provider Submits**: Storage provider submits signed data with proof set
3. **Contract Verifies**: PandoraService verifies signature authenticity
4. **Rail Creation**: Only valid signatures create payment rails

## PDP (Provable Data Possession) System

### Core Architecture

The PDP system provides cryptographic proof that storage providers actually possess the data they claim to store:

#### Key Components:
- **[PDPVerifier.sol](mdc:contracts/pdp/PDPVerifier.sol)** - Main verification engine (822 lines)
- **[SimplePDPService.sol](mdc:contracts/pdp/SimplePDPService.sol)** - Basic PDP service implementation  
- **[Proofs.sol](mdc:contracts/pdp/Proofs.sol)** - Proof generation and validation utilities
- **[Cids.sol](mdc:contracts/pdp/Cids.sol)** - IPFS CID handling and validation
- **[BitOps.sol](mdc:contracts/pdp/BitOps.sol)** - Bit manipulation for proof operations
- **[Fees.sol](mdc:contracts/pdp/Fees.sol)** - PDP fee calculation and management

### Verification Process

#### 1. Proof Set Creation
Storage providers register data as proof sets with unique identifiers:
```solidity
// Data is organized into proof sets with metadata
uint256 proofSetId = 12345;
string memory metadata = "Climate dataset Q4 2024";
uint256 dataSize = 107374182400; // 100 GB
```

#### 2. Challenge Generation  
The PDPVerifier periodically issues cryptographic challenges:
- **Random Challenges**: Challenges are generated using verifiable randomness
- **Periodic Schedule**: Regular intervals ensure continuous verification
- **Challenge Parameters**: Include block ranges and specific data segments

#### 3. Proof Submission
Storage providers respond with cryptographic proofs:
- **Merkle Proofs**: Demonstrate possession of specific data segments
- **Timing Requirements**: Proofs must be submitted within deadline windows
- **Verification**: Mathematical validation of proof authenticity

#### 4. Verification Results
Results trigger payment and reputation adjustments:
- **Successful Proofs**: Maintain payment flows and provider reputation
- **Failed Proofs**: Trigger arbitration and payment reductions
- **Fault Recording**: Track provider reliability over time

### Integration with Data Marketplace

#### Collection → Proof Set Linking
Each dataset collection links to a PDP proof set:

```solidity
struct Collection {
    // ... other fields
    uint256 proofSetId;     // Links to PDP verification
    uint256 size;           // Dataset size for proof parameters
    bool isActive;          // Depends on PDP verification status
}
```

#### Enhanced Purchase → Verification Flow
When users purchase dataset access:
1. **Payment Processing**: Total payment (collection price + reserve cost)
2. **Fee Distribution**: 10% deployer fee, 80% to data owner (including reserve cost)
3. **Lockup Extension**: Reserve cost triggers 7-day lockup period extension
4. **Verification Monitoring**: Ongoing PDP verification ensures data availability
5. **Access Guarantee**: NFT ownership backed by cryptographic proof of data possession

## FWS (Filecoin Web Services) Integration

### PandoraService Architecture

**[PandoraService.sol](mdc:contracts/fws/PandoraService.sol)** provides enterprise-grade payment infrastructure:

#### Enhanced Features:
- **Upgradeable Proxy**: ERC1967 pattern for contract upgrades
- **Dynamic Payment Rails**: Streaming payment channels with service-based pricing
- **Multi-Tier Commission**: 5% basic service, 40% CDN service
- **Service Provider Registry**: Multi-step approval system
- **Lockup Period Management**: Dynamic lockup extensions based on reserve costs
- **Enhanced Arbitration**: Automated dispute resolution with payment reductions

#### Service-Based Pricing Structure
```javascript
// Basic service pricing
const basicServiceRate = 2; // USDFC per TiB per month
const basicCommission = 5; // 5% commission

// CDN service pricing  
const cdnServiceRate = 3; // USDFC per TiB per month
const cdnCommission = 40; // 40% commission

// Calculate daily costs
const dailyCost = (monthlyRate * dataSize) / (30 * TIB_IN_BYTES);
```

### Payment Rail Management

#### Enhanced Rail Creation Process
```bash
# Create payment rail with service selection
npx hardhat create-rail \
  --pandora 0x123...abc \
  --payer 0x456...def \
  --payee 0x789...ghi \
  --proof-set-id 12345 \
  --with-cdn true \
  --network calibrationnet
```

#### Lockup Period Extensions
```bash
# Extend lockup period (triggered by purchases)
npx hardhat increase-lockup-period \
  --pandora 0x123...abc \
  --proof-set-id 12345 \
  --epochs 20160 \
  --network calibrationnet
```

## IPFS & Content Addressing

### Data Storage Strategy

#### Public vs Private Data Separation
- **Public CID**: Openly accessible dataset samples and schemas
- **Private CID**: Full dataset accessible only to NFT owners
- **Content Addressing**: IPFS CIDs ensure data integrity and immutability

#### CID Management in Collections
```solidity
struct Collection {
    string publicCid;       // "QmPublicDataSample..."
    string privateCid;      // "QmPrivateFullDataset..."
    string publicColumns;   // "timestamp,location,temperature"
    string privateColumns;  // "sensor_id,raw_data,calibration"
}
```

#### Setting Data CIDs
```bash
# Activate collection by setting CIDs
npx hardhat set-collection-cid \
  --registry 0x123...abc \
  --collection 0x456...def \
  --public-cid "QmPublicDataHash..." \
  --private-cid "QmPrivateDataHash..." \
  --network calibrationnet
```

### CAR File Generation

#### Using go-generate-car Tool
**[tools/go-generate-car/](mdc:tools/go-generate-car)** provides CAR file generation:

```bash
# Generate CAR file for dataset
cd tools/go-generate-car

# Create input JSON
echo '[
  {"Path": "public/metadata.json", "Size": 1024},
  {"Path": "private/dataset.csv", "Size": 1073741824}
]' > dataset.json

# Generate CAR file
./go-generate-car -i dataset.json -o dataset.car

# Upload to Filecoin network
# (Use your preferred method: Lighthouse, Web3.Storage, etc.)
```

#### CAR File Structure
- **Manifest**: Describes all files and their relationships
- **Content Blocks**: IPFS blocks containing actual data
- **Merkle DAG**: Cryptographic integrity verification
- **CommP**: Piece commitment for Filecoin storage verification

## Network Configuration

### Filecoin EVM Networks

#### Calibration Testnet (Default Development)
```javascript
calibrationnet: {
    chainId: 314159,
    url: "https://api.calibration.node.glif.io/rpc/v1",
    accounts: [process.env.PRIVATE_KEY],
    blockExplorer: "https://calibration.filfox.info/en"
}
```

#### Filecoin Mainnet
```javascript
mainnet: {
    chainId: 314,
    url: "https://api.node.glif.io",
    accounts: [process.env.PRIVATE_KEY],
    blockExplorer: "https://filfox.info/en"
}
```

### Gas & Transaction Costs

#### Typical Gas Usage
- **Collection Creation**: ~200,000 gas
- **NFT Purchase**: ~150,000 gas (now includes reserve cost calculation)
- **PDP Proof Verification**: ~100,000 gas
- **Payment Rail Operations**: ~80,000 gas
- **Provider Registration**: ~60,000 gas

#### Cost Optimization
- **Batch Operations**: Reduce per-transaction overhead
- **Storage Packing**: Optimize struct layouts for gas efficiency
- **Custom Errors**: Replace revert strings for gas savings

## Enhanced Integration Workflow

### Data Owner Integration

#### 1. Prepare Dataset
```bash
# Organize data into public/private portions
mkdir -p dataset/{public,private}
cp metadata.json dataset/public/
cp full_dataset.csv dataset/private/

# Generate CAR files
cd tools/go-generate-car
./go-generate-car -i dataset_manifest.json -o dataset.car
```

#### 2. Upload to Filecoin
```bash
# Upload via storage provider
curl -X POST https://api.web3.storage/upload \
  -H "Authorization: Bearer $API_TOKEN" \
  -F file=@dataset.car

# Get CIDs for public and private data
PUBLIC_CID="QmPublic..."
PRIVATE_CID="QmPrivate..."
```

#### 3. Create Collection with Enhanced Pricing
```bash
# Create collection with proof set integration
npx hardhat create-collection \
  --registry 0x123...abc \
  --name "Weather Dataset 2024" \
  --symbol "WEATHER24" \
  --proof-set-id 12345 \
  --size "107374182400" \
  --price "1000000000000000000" \
  --network calibrationnet

# Check effective price (collection + reserve cost)
npx hardhat get-collection-effective-price \
  --registry 0x123...abc \
  --collection 0x456...def \
  --network calibrationnet

# Set CIDs to activate
npx hardhat set-collection-cid \
  --registry 0x123...abc \
  --collection 0x456...def \
  --public-cid $PUBLIC_CID \
  --private-cid $PRIVATE_CID \
  --network calibrationnet
```

### Storage Provider Integration

#### 1. Register with Enhanced Provider Registry
```bash
# Register provider for approval
npx hardhat add-service-provider \
  --pandora 0x123...abc \
  --provider 0x456...def \
  --pdp-url "https://my-provider.com/pdp" \
  --retrieval-url "https://my-provider.com/retrieve" \
  --network calibrationnet

# Check approval status
npx hardhat get-provider-status \
  --pandora 0x123...abc \
  --provider 0x456...def \
  --network calibrationnet
```

#### 2. Monitor PDP Challenges with Arbitration
```javascript
// Enhanced storage provider monitoring system
const pdpVerifier = await ethers.getContractAt("PDPVerifier", verifierAddress);
const pandoraService = await ethers.getContractAt("PandoraService", pandoraAddress);

pdpVerifier.on("ChallengeGenerated", async (proofSetId, challengeId, deadline) => {
    console.log(`Challenge ${challengeId} for proof set ${proofSetId}`);
    console.log(`Deadline: ${new Date(deadline * 1000)}`);
    
    // Generate and submit proof
    const proof = await generateProof(proofSetId, challengeId);
    await pdpVerifier.submitProof(challengeId, proof);
});

// Monitor arbitration events
pandoraService.on("PaymentArbitrated", async (railId, proofSetId, originalAmount, modifiedAmount) => {
    console.log(`Payment arbitrated for rail ${railId}`);
    console.log(`Amount reduced from ${originalAmount} to ${modifiedAmount}`);
    
    // Update local accounting and investigate failure
    await handleArbitration(railId, proofSetId);
});
```

### Data Consumer Integration

#### 1. Browse Available Datasets with Pricing
```bash
# Query active collections
npx hardhat get-active-collections \
  --registry 0x123...abc \
  --network calibrationnet

# Check enhanced pricing (collection + reserve cost)
npx hardhat get-collection-effective-price \
  --registry 0x123...abc \
  --collection 0x456...def \
  --network calibrationnet

# Check dataset details including PDP status
npx hardhat get-collection-details \
  --registry 0x123...abc \
  --collection 0x456...def \
  --network calibrationnet
```

#### 2. Purchase with Enhanced Payment Flow
```bash
# Purchase dataset access (collection price + reserve cost)
npx hardhat purchase-dataset \
  --registry 0x123...abc \
  --collection 0x456...def \
  --network calibrationnet

# Check payment breakdown
npx hardhat get-purchase-breakdown \
  --registry 0x123...abc \
  --collection 0x456...def \
  --network calibrationnet
```

#### 3. Access Verified Data
```javascript
// Enhanced verification and access flow
const hasAccess = await registry.hasNFT(collectionAddress, userAddress);
if (hasAccess) {
    const collection = await registry.getCollectionInfo(collectionAddress);
    const privateCid = collection.privateCid;
    
    // Verify PDP status before accessing
    const proofSetStatus = await pandoraService.getProofSetStatus(collection.proofSetId);
    console.log("PDP verification status:", proofSetStatus);
    
    // Access private data via IPFS
    const privateData = await ipfs.cat(privateCid);
    console.log("Accessing verified private dataset:", privateData);
}
```

## Enhanced Monitoring & Analytics

### Service Provider Analytics
```bash
# Monitor provider performance
npx hardhat get-provider-stats \
  --pandora 0x123...abc \
  --provider 0x456...def \
  --network calibrationnet

# Check provider commission earnings
npx hardhat get-provider-earnings \
  --pandora 0x123...abc \
  --provider 0x456...def \
  --network calibrationnet
```

### Payment Rail Health
```bash
# Monitor enhanced payment rail status
npx hardhat get-rail-status \
  --pandora 0x123...abc \
  --rail-id 67890 \
  --network calibrationnet

# Check lockup period extensions
npx hardhat get-lockup-extensions \
  --pandora 0x123...abc \
  --proof-set-id 12345 \
  --network calibrationnet
```

### Reserve Cost Analytics
```bash
# Monitor reserve cost trends
npx hardhat get-reserve-costs \
  --registry 0x123...abc \
  --from-block 1000000 \
  --network calibrationnet

# Check collection pricing effectiveness
npx hardhat analyze-pricing \
  --registry 0x123...abc \
  --collection 0x456...def \
  --network calibrationnet
```

This enhanced Filecoin integration provides:
- **Dynamic Pricing**: Service-tier-based pricing with CDN add-ons
- **Guaranteed Storage**: 7-day reserve cost system with lockup extensions
- **Professional Provider Registry**: Multi-step approval process for quality assurance
- **Enhanced Payment Security**: Sophisticated fee distribution and arbitration
- **Signature-Verified Operations**: EIP-712 signature verification for security
- **Comprehensive Analytics**: Advanced monitoring and cost analysis tools
