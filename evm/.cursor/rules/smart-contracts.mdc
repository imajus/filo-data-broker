---
description: 
globs: contracts/**/*.sol
alwaysApply: false
---
# Smart Contract Architecture & Patterns

## Contract Overview

### FDBRegistry Contract Pattern
The **[FDBRegistry.sol](mdc:contracts/FDBRegistry.sol)** serves as the main data marketplace registry with integrated payments:

#### Key Features:
- **Collection Creation**: `createCollection()` deploys dataset NFT collections with PDP integration
- **Payment Processing**: USDFC token payments with automatic fee distribution (10%/10%/80%)
- **PandoraService Integration**: Manages payment rails and PDP verification through PandoraService
- **Dataset Management**: Tracks public/private data CIDs, column schemas, proof set IDs
- **Access Control**: NFT ownership grants access to private dataset content
- **Purchase Flow**: `purchase()` handles token payments and mints access NFTs
- **Balance Management**: Internal balance tracking with withdrawal functionality
- **Service Provider Integration**: Leverages PandoraService for storage verification

#### Data Structures:
```solidity
struct Collection {
    address nftContract;      // NFT contract address
    address owner;           // Collection owner
    string name;             // Dataset name
    string symbol;           // Collection symbol
    string description;      // Dataset description
    string privateColumns;   // Private data columns
    string publicColumns;    // Public data columns
    string publicCid;        // IPFS CID for public data
    string privateCid;       // IPFS CID for private data
    uint256 proofSetId;      // PDP proof set identifier
    uint256 price;           // Purchase price in USDFC
    uint256 size;            // Dataset size in bytes
    uint256 createdAt;       // Creation timestamp
    bool isActive;           // Purchase availability
}
```

#### Payment Architecture:
- **Payment Token**: Immutable USDFC token for all transactions
- **PandoraService**: Immutable reference to FWS payment infrastructure
- **Fee Structure**: 10% deployer, 10% FWS (via PandoraService), 80% data owner
- **Rail Management**: PandoraService handles payment rail creation and lockup increases

### PandoraService Contract System
The **[PandoraService.sol](mdc:contracts/fws/PandoraService.sol)** provides advanced payment rails with PDP verification:

#### Architecture:
- **Upgradeable Pattern**: Uses ERC1967 proxy for upgradability
- **Payment Integration**: Integrates with [Payments.sol](mdc:contracts/fws/payments/Payments.sol) contract
- **PDP Verification**: Implements PDPListener for proof verification callbacks
- **Service Provider Registry**: Manages approved storage providers
- **Arbitration System**: Implements IArbiter for payment dispute resolution

#### Key Features:
- **Rail Creation**: Creates payment rails for storage providers with lockup mechanisms
- **Commission Management**: Dynamic commission rates (basic 5%, CDN 40%)
- **Proof Set Management**: Links dataset collections to PDP proof sets
- **Service Pricing**: Configurable pricing (2 USDFC/TiB basic, 3 USDFC/TiB with CDN)
- **Provider Management**: Registration, approval, and removal of storage providers
- **Fault Handling**: Arbitration for failed proofs and payment adjustments

#### Provider Management:
```solidity
struct ApprovedProviderInfo {
    address owner;
    string pdpUrl;
    string pieceRetrievalUrl;
    uint256 registeredAt;
    uint256 approvedAt;
}
```

### PDP (Provable Data Possession) System
The PDP system ensures data integrity and availability through cryptographic proofs:

#### Core Contracts:
- **[PDPVerifier.sol](mdc:contracts/pdp/PDPVerifier.sol)** - Main verification engine
- **[SimplePDPService.sol](mdc:contracts/pdp/SimplePDPService.sol)** - Basic PDP service implementation
- **[Proofs.sol](mdc:contracts/pdp/Proofs.sol)** - Proof generation and validation utilities
- **[Cids.sol](mdc:contracts/pdp/Cids.sol)** - IPFS CID handling and validation
- **[BitOps.sol](mdc:contracts/pdp/BitOps.sol)** - Bit manipulation operations for proofs
- **[Fees.sol](mdc:contracts/pdp/Fees.sol)** - PDP fee calculation and management

#### Verification Process:
1. **Proof Set Creation**: Data is organized into proof sets with unique IDs
2. **Challenge Generation**: Periodic challenges are issued to storage providers
3. **Proof Submission**: Providers submit cryptographic proofs of data possession
4. **Verification**: PDPVerifier validates proofs using mathematical verification
5. **Fault Handling**: Failed proofs trigger arbitration and payment adjustments

### NFT Contract Implementation
The **[NFT.sol](mdc:contracts/NFT.sol)** remains an ERC-721 implementation for dataset access tokens:

#### Key Features:
- **Full ERC-721 Compliance**: Implements IERC721, IERC721Metadata, IERC165
- **Registry-Controlled**: Only FDBRegistry can mint tokens (replaces NFTFactory)
- **Custom Errors**: Gas-efficient error handling
- **Dataset Access**: NFTs represent access rights to private dataset portions
- **Sequential Token IDs**: Auto-incrementing token assignment

### Payment System Integration

#### FWS Payments Architecture:
The **[Payments.sol](mdc:contracts/fws/payments/Payments.sol)** provides enterprise payment infrastructure:

- **Payment Rails**: Streaming payment channels between parties
- **Lockup Mechanisms**: Time-based fund security and release schedules
- **Rate Management**: Dynamic payment rate adjustments via [RateChangeQueue.sol](mdc:contracts/fws/payments/RateChangeQueue.sol)
- **Settlement Engine**: Epoch-based payment processing and distribution
- **Operator Commissions**: Flexible fee collection for service operators

#### Payment Flow Architecture:
1. **Buyer Approval**: User approves USDFC token spending to FDBRegistry
2. **Purchase Validation**: Registry validates balance and allowance
3. **Token Transfer**: USDFC tokens transferred from buyer to registry
4. **Fee Distribution**: Automatic split (10% deployer, 10% FWS, 80% owner)
5. **FWS Integration**: Fees deposited to owner through PandoraService payment rails
6. **Lockup Increase**: PandoraService increases rail lockup for ongoing payments
7. **NFT Minting**: Access NFT minted to buyer granting dataset access

### Error Handling System

#### FDBRegistry Errors:
```solidity
error FDBRegistry__EmptyName();              // Collection name validation
error FDBRegistry__EmptySymbol();            // Collection symbol validation
error FDBRegistry__NotCollectionOwner();     // Access control validation
error FDBRegistry__InsufficientPayment();    // Payment amount validation
error FDBRegistry__InsufficientAllowance();  // ERC20 allowance validation
error FDBRegistry__TransferFailed();         // Token transfer validation
error FDBRegistry__InsufficientBalance();    // Withdrawal validation
```

#### Security Patterns:
- **Input Validation**: Comprehensive validation of all user inputs
- **State Consistency**: Proper balance and ownership tracking across contracts
- **Access Control**: Role-based permissions for critical operations
- **Reentrancy Protection**: ReentrancyGuard usage in payment contracts
- **Overflow Protection**: Solidity 0.8+ built-in overflow checks

## Development Conventions

### Solidity Style:
- **Pragma**: `^0.8.23` for latest features and gas optimizations  
- **State Variables**: Prefixed with `s_` (e.g., `s_userCollections`, `s_balances`)
- **Custom Errors**: Prefixed with contract name (e.g., `FDBRegistry__InsufficientPayment`)
- **Immutable References**: External contract addresses marked as immutable

### Gas Optimization:
- **Optimizer Enabled**: 1000 runs in [hardhat.config.js](mdc:hardhat.config.js)
- **Batch Operations**: Efficient operations with array processing
- **Storage Packing**: Optimized struct layouts for reduced gas costs
- **Custom Errors**: Gas-efficient error handling over revert strings

### Integration Patterns:

#### Registry â†’ PandoraService Communication:
1. Registry creates collection with proof set ID
2. PandoraService manages payment rails for collection
3. Purchase triggers lockup increase through PandoraService
4. Payments flow through FWS infrastructure

#### PDP Verification Integration:
1. Collections linked to proof sets in PandoraService
2. Storage providers submit proofs to PDPVerifier
3. Verification results trigger payment adjustments
4. Failed proofs activate arbitration mechanisms

#### Metadata & Storage Strategy:
- **Base URI**: Configured in FDBRegistry (`BASE_TOKEN_URI` constant)
- **Token Metadata**: `{baseURI}{tokenId}.json` format for NFT metadata
- **Dataset Storage**: Public/private CIDs stored separately in collection data
- **IPFS Integration**: CID validation and storage through [Cids.sol](mdc:contracts/pdp/Cids.sol)
- **CAR Files**: Generated using [go-generate-car tool](mdc:tools/go-generate-car)
- **Verification**: PDP proofs ensure data availability and integrity

### Event System:

#### Registry Events:
```solidity
event CollectionCreated(/* collection creation details */);
event NFTPurchased(/* purchase transaction details */);
event BalanceWithdrawn(/* withdrawal details */);
```

#### PandoraService Events:
```solidity
event ProofSetRailCreated(/* payment rail creation */);
event ProviderApproved(/* service provider management */);
event PaymentArbitrated(/* arbitration results */);
```

These events enable comprehensive indexing and analytics for the data marketplace.
