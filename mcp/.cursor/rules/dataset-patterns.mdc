---
description: 
globs: 
alwaysApply: false
---
# Dataset Implementation Patterns

## Factory Pattern
- Use the singleton factory from [lib/dataset/factory.js](mdc:lib/dataset/factory.js) to access datasets
- Factory abstracts the dataset implementation (Filecoin vs Local/Mock)
- Current default is `FilecoinDatasetFactory` but can be swapped for testing

## Dataset Interface Contract
All dataset implementations must follow the `Dataset` interface defined in [types.d.ts](mdc:types.d.ts):
```typescript
interface Dataset {
  id: string;
  name: string;
  description: string;
  publicColumns: string[];
  privateColumns: string[];
  price?: number;
  query(sql: string): Promise<any[]>;
}
```

## Private Field Conventions
- Use private fields with `#` syntax for internal state (requires Node.js 18+)
- Example from [FilecoinDataset.js](mdc:lib/dataset/filecoin/FilecoinDataset.js):
  - `#address` - Dataset contract address
  - `#rows` - Cached dataset rows
  - `#purchased` - Purchase state
  - `#decrypted` - Decryption state

## Initialization Patterns
- Use static `load()` method for async dataset creation
- Lazy initialization with private `#initialize()` methods
- Cache data in private fields to avoid repeated fetches
- Implement proper state management for purchase/decryption flows

## Public vs Private Columns
- Public columns: Available for querying without purchase, stored on IPFS
- Private columns: Encrypted, require NFT ownership to decrypt
- Query results include both public and private data after purchase
- Public data fetched via [fetchPublicDataset()](mdc:mcd:lib/lighthouse.js)
- Private data fetched via [fetchPrivateDataset()](mdc:mcd:lib/lighthouse.js) with encryption

## Error Handling
- Throw descriptive errors for access control violations
- Handle Lighthouse SDK error format inconsistencies (arrays vs objects)
- Provide user-friendly error messages for authentication failures
