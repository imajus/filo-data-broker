---
description: 
globs: 
alwaysApply: false
---
# Development Workflow & Testing

## Environment Setup
1. Install dependencies: `npm install`
2. Set up environment variables in `.env`:
   ```
   ETHEREUM_PRIVATE_KEY=0x...
   ```
3. Ensure Node.js >=20.0.0 for private field support

## Development Commands
- **Start server**: `npm start` - Runs the MCP server
- **Development mode**: `npm run dev` - Uses MCP inspector with auto-reload
- **CLI execution**: `npx filo-data-broker-mcp-server` - Direct binary execution

## Testing with Local Datasets
- Use [LocalDataset](mdc:lib/dataset/mock/LocalDataset.js) for development without blockchain
- Sample data available in [sample/](mdc:sample) directory
- Swap factory implementation in [lib/dataset/factory.js](mdc:lib/dataset/factory.js) for testing

## MCP Inspector Usage
- Use `npm run dev` to start with MCP inspector
- Provides debugging interface for tool calls and responses
- Helpful for testing tool schemas and response formats

## Dataset Development Pattern
1. Create new dataset class implementing `Dataset` interface
2. Add corresponding factory class implementing `DatasetFactory` interface
3. Update factory selection in [lib/dataset/factory.js](mdc:lib/dataset/factory.js)
4. Test with sample data before blockchain integration

## Adding New Tools
1. Create tool file in [lib/tools/](mdc:lib/tools) directory
2. Follow the tool module pattern from existing tools
3. Import and register in [server.js](mdc:server.js)
4. Use Zod schemas for parameter validation
5. Test with MCP inspector

## Blockchain Development
- Test on testnet before mainnet deployment
- Use environment variables for different network configurations
- Consider gas costs when implementing purchase flows
- Handle network errors gracefully

## Error Testing Scenarios
- Test with invalid dataset IDs
- Test SQL queries with malformed syntax
- Test access to datasets without purchase
- Test network connectivity issues
- Test authentication failures with Lighthouse

## Performance Considerations
- Cache dataset metadata to avoid repeated blockchain calls
- Implement row limits in SQL queries (currently enforced in [sql.js](mdc:lib/sql.js))
- Consider pagination for large datasets
- Monitor IPFS gateway response times

## Security Testing
- Validate SQL injection protection in [transformQuery()](mdc:lib/sql.js)
- Test access controls for private datasets
- Verify encryption/decryption flows
- Test authentication message expiration handling
