---
description: 
globs: 
alwaysApply: true
---
# Coding Conventions & Best Practices

## Module System
- Project uses ESM modules (`"type": "module"` in [package.json](mdc:package.json))
- Use `.js` extensions in all import statements
- JSON imports use `with { type: 'json' }` syntax for explicit type assertion

## TypeScript Integration
- Use JSDoc comments with TypeScript syntax for type hints
- Type definitions in [types.d.ts](mdc:types.d.ts) for shared interfaces
- Use `@implements` JSDoc tag for interface compliance

## Private Fields
- Use modern private field syntax `#fieldName` for truly private members
- Requires Node.js 18+ (enforced in [package.json](mdc:package.json))
- Private methods prefixed with `#` (e.g., `#initialize()`, `#decrypt()`)

## Async/Await Patterns
- Prefer async/await over Promise chains
- Use `Promise.all()` for parallel operations (e.g., in dataset listing)
- Implement proper error propagation in async functions

## Error Handling Strategy
- Use descriptive error messages that help users understand issues
- Let business logic errors bubble up to the MCP layer
- Handle external service errors (Lighthouse, blockchain) gracefully
- Use try-catch blocks for expected failure scenarios

## File Organization
- Group related functionality in directories (e.g., `lib/dataset/`, `lib/tools/`)
- Keep implementation-specific code in subdirectories (e.g., `filecoin/`, `mock/`)
- Use index files or factory patterns for clean public APIs

## Naming Conventions
- **Files**: kebab-case (e.g., `query-dataset.js`)
- **Classes**: PascalCase (e.g., `FilecoinDataset`)
- **Functions/Variables**: camelCase (e.g., `getDatasetFactory`)
- **Constants**: UPPER_SNAKE_CASE (e.g., `BASE_DIR`)
- **Private fields**: camelCase with `#` prefix (e.g., `#publicCid`)

## SQL Query Security
- Use [transformQuery()](mdc:lib/sql.js) to sanitize SQL inputs
- Enforce table name restrictions and row limits
- Note: Current implementation has potential for SQL injection - needs improvement

## Environment Configuration
- Use [dotenv](mdc:bin/index.js) for environment variable loading
- Fail fast on missing required environment variables
- Use quiet loading to avoid console noise in production

## Documentation Standards
- Provide JSDoc comments for public APIs
- Include parameter and return type information
- Document async functions and their behavior
- Use `@param` and `@returns` tags consistently
